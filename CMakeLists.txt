cmake_minimum_required(VERSION 3.13)
project(TGFX-Benchmark)

#set(CMAKE_VERBOSE_MAKEFILE ON)
include(./third_party/vendor_tools/vendor.cmake)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
cmake_policy(SET CMP0063 NEW)

option(TGFX_USE_ANGLE "Allow build with the ANGLE library" OFF)

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    list(APPEND BENCH_COMPILE_OPTIONS -Werror -Wall -Wextra -Weffc++ -Wconversion -pedantic -Werror=return-type -Wno-unused-command-line-argument)
endif ()

if (MSVC)
    add_compile_options("/utf-8")
    string(TOLOWER ${MSVC_C_ARCHITECTURE_ID} ARCH)
endif (MSVC)

if (NOT TGFX_DIR)
    set(TGFX_DIR third_party/tgfx)
else ()
    set(HAS_CUSTOM_TGFX_DIR ON)
endif ()
get_filename_component(TGFX_DIR "${TGFX_DIR}" REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
if (HAS_CUSTOM_TGFX_DIR)
    message("TGFX_DIR: ${TGFX_DIR}")
endif ()
list(APPEND BENCH_INCLUDES ${TGFX_DIR}/include)
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
add_subdirectory(${TGFX_DIR} tgfx EXCLUDE_FROM_ALL)

list(APPEND BENCH_INCLUDES src)
file(GLOB_RECURSE SRC_FILES
        src/base/*.cpp
        src/benchmark/*.cpp)

if (IOS)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/ios/*.mm)
    list(APPEND SRC_FILES ${PLATFORM_FILES})
elseif (ANDROID)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/android/*.cpp)
    list(APPEND SRC_FILES ${PLATFORM_FILES})
elseif (MACOS)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/mac/*.mm)
    list(APPEND SRC_FILES ${PLATFORM_FILES})
elseif (WIN32)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/win/*.cpp)
    list(APPEND SRC_FILES ${PLATFORM_FILES})

    if (${CMAKE_SYSTEM_VERSION} VERSION_GREATER_EQUAL 6.3) # Windows 8.1 or later
        add_definitions(-D_WIN32_WINNT=0x0603)
        find_library(SHCORE_LIB SHCore)
        list(APPEND BENCHMARK_LIBS ${SHCORE_LIB})
    else ()
        add_definitions(-D_WIN32_WINNT=0x0601) # Windows 7
        find_library(USER32 user32)
        list(APPEND BENCHMARK_LIBS ${USER32})
    endif ()

    if (TGFX_USE_ANGLE)
        add_definitions(-DTGFX_USE_ANGLE)
        list(APPEND BENCH_INCLUDES ${TGFX_DIR}/vendor/angle/include)
        file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/libEGL.dll)
        file(COPY ${TGFX_DIR}/vendor/angle/win/${ARCH}/libEGL.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
        file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/libGLESv2.dll)
        file(COPY ${TGFX_DIR}/vendor/angle/win/${ARCH}/libGLESv2.dll DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
    endif ()
endif ()

list(APPEND BENCHMARK_LIBS ${TGFX_SHARED_LIBS})
if (WIN32)
    add_executable(Benchmark WIN32 ${SRC_FILES})
else ()
    add_executable(Benchmark ${SRC_FILES})
endif ()
add_dependencies(Benchmark tgfx)
target_include_directories(Benchmark PRIVATE ${BENCH_INCLUDES})
target_compile_options(Benchmark PUBLIC ${BENCH_COMPILE_OPTIONS})
target_link_libraries(Benchmark tgfx ${BENCHMARK_LIBS})
