cmake_minimum_required(VERSION 3.13)
project(Benchmark)

#set(CMAKE_VERBOSE_MAKEFILE ON)
include(./third_party/vendor_tools/vendor.cmake)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
cmake_policy(SET CMP0063 NEW)

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    list(APPEND BENCH_COMPILE_OPTIONS -Werror -Wall -Wextra -Weffc++ -Wconversion -pedantic -Werror=return-type -Wno-unused-command-line-argument)
endif ()

list(APPEND BENCH_INCLUDES src)
file(GLOB_RECURSE SRC_FILES src/*.cpp)

if (IOS)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/ios/*.mm)
elseif (ANDROID)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/android/*.cpp)
elseif (MACOS)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/mac/*.mm)
elseif (WIN32)
    file(GLOB_RECURSE PLATFORM_FILES src/platform/win/*.cpp)
endif ()
list(APPEND SRC_FILES ${PLATFORM_FILES})

if (NOT TGFX_DIR)
    set(TGFX_DIR third_party/tgfx)
else ()
    set(HAS_CUSTOM_TGFX_DIR ON)
endif ()
get_filename_component(TGFX_DIR "${TGFX_DIR}" REALPATH BASE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
if (HAS_CUSTOM_TGFX_DIR)
    message("TGFX_DIR: ${TGFX_DIR}")
endif ()
list(APPEND BENCH_INCLUDES ${TGFX_DIR}/include)
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
add_subdirectory(${TGFX_DIR} tgfx EXCLUDE_FROM_ALL)

add_executable(Benchmark ${SRC_FILES})
add_dependencies(Benchmark tgfx)
target_include_directories(Benchmark PRIVATE ${BENCH_INCLUDES})
target_compile_options(Benchmark PUBLIC ${BENCH_COMPILE_OPTIONS})
target_link_libraries(Benchmark tgfx ${TGFX_SHARED_LIBS})
